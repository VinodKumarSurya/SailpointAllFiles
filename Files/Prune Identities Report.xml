<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE TaskDefinition PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<TaskDefinition created="" executor="sailpoint.reporting.LiveReportExecutor" id="" modified="" name="Prune Identities Report" progressMode="Percentage" resultAction="Rename" template="true" type="LiveReport">
  <Attributes>
    <Map>
      <entry key="report">
        <value>
          <LiveReport title="Prune Identities Report">
            <DataSource objectType="Identity" type="Filter">
              <QueryParameters>
                <Parameter argument="identities" property="id"/>
              </QueryParameters>
            </DataSource>
            <Columns>
              <ReportColumnConfig field="name" header="identity_name" property="name" scriptArguments="name" sortable="true" width="110">
                <RenderScript>
                  <Source>
                    import java.util.*;
                    import java.util.List;
                    import java.util.HashSet;
                    import java.util.Iterator;
                    import java.util.Date;
                    import sailpoint.object.Link;
                    import sailpoint.object.Bundle;
                    import sailpoint.object.Capability;
                    import sailpoint.object.ManagedAttribute;
                    import sailpoint.api.SailPointContext;
                    import sailpoint.object.Application;
                    import sailpoint.object.CertificationLink;
                    import sailpoint.object.WorkItem;
                    import sailpoint.object.Identity;
                    import sailpoint.tools.GeneralException;
                    import sailpoint.object.Filter;
                    import sailpoint.object.QueryOptions;

                    String identityName = scriptArgs.get("name");

                    System.out.println(" ****** identityName is "+identityName);
                    
                    Identity identity = context.getObjectByName(Identity.class, identityName);

                    if(identity != null &amp;&amp; identity != void){

                    List &lt;Link> links = identity.getLinks();		

                    List&lt;CertificationLink> certifications = identity.getCertifications();

                    Date useBy = identity.getUseBy();

                    Filter filter = Filter.eq("manager.name", identity.getName());

                    QueryOptions qoop = new QueryOptions();

                    qoop.addFilter(filter);

                    List &lt;Identity> managerIdentities = context.getObjects(Identity.class, qoop);

                    List &lt;Capability> capabilities = identity.getCapabilities();

                    boolean correlatedOverridden = identity.isCorrelatedOverridden();

                    Filter filter = Filter.eq("owner.name", identity.getName());

                    QueryOptions qop = new QueryOptions();

                    qop.addFilter(filter);

                    List &lt;Bundle> bundles = context.getObjects(Bundle.class, qop);

                    List &lt;Application> applications = context.getObjects(Application.class, qop);

                    List &lt;ManagedAttribute> managedAttributes = context.getObjects(ManagedAttribute.class, qop);

                    List &lt;WorkItem> workItems = context.getObjects(WorkItem.class, qop);

                    if(identity.getName().equalsIgnoreCase("spadmin")) {

                    }else if(links != null &amp;&amp; !links.isEmpty()) {

                    }else if(certifications != null &amp;&amp; !certifications.isEmpty()){

                    }else if(managerIdentities != null &amp;&amp; !managerIdentities.isEmpty()){

                    }else if(correlatedOverridden){

                    }else if(useBy != null){

                    }else if(capabilities != null &amp;&amp; !capabilities.isEmpty()){

                    }else if(bundles != null &amp;&amp; !bundles.isEmpty()){

                    }else if(applications != null &amp;&amp; !applications.isEmpty()){

                    }else if(managedAttributes != null &amp;&amp; !managedAttributes.isEmpty()){

                    }else if(workItems != null &amp;&amp; !workItems.isEmpty()){

                    }else{
                    
                    System.out.println("===========pruneIdentities==========="+identity.getName());
                    return identity.getName();
                    }
                    }

                  </Source>
                </RenderScript>
              </ReportColumnConfig>
            </Columns>
            <ReportSummary title="Identity Details">
              <DataSourceRule>
                <Reference class="sailpoint.object.Rule" id="" name="Run Prune Identity Report Customizer"/>
              </DataSourceRule>
              <Values>
                <LiveReportSummaryValue label="Identities_Analyzed" name="analyzedIdentities"/>
                <LiveReportSummaryValue label="Correlated_Identities" name="correlatedIdentities"/>
                <LiveReportSummaryValue label="Identities_Protected" name="protectedIdentities"/>
                <LiveReportSummaryValue label="Identities_ToDelete" name="readyToDeleteIdentities"/>
              </Values>
            </ReportSummary>
          </LiveReport>
        </value>
      </entry>
    </Map>
  </Attributes>
  <Description>Displays the prune identities.</Description>
  <RequiredRights>
    <Reference class="sailpoint.object.SPRight" id="" name="FullAccessIdentityCubeSummaryReport"/>
  </RequiredRights>
  <Signature>
    <Inputs>
      <Argument multi="true" name="identities" type="Identity"/>
    </Inputs>
  </Signature>
</TaskDefinition>
